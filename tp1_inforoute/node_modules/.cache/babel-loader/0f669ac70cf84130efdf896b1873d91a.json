{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ced\\\\Desktop\\\\Uni\\\\Inforoute\\\\TP1_Inforoute\\\\tp1_inforoute\\\\src\\\\components\\\\ImageWord.js\";\nimport { ImageQuiz } from './ImageQuiz';\nimport AudioTest from './Audio.js';\nimport { Accordion } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function ImageWord(path, isQuiz) {\n  let lienData = require('./../texte/' + path + '.json');\n\n  const shuffle = arr => [...arr].sort(() => Math.random() - 0.5);\n\n  let images = getImagePaths(require.context(\"./../images/\", false, /\\.(png|jpe?g|svg)$/));\n  let name = 'sentence_0';\n  let test;\n  let ret;\n\n  if (!isQuiz) {\n    var _lienData$texte;\n\n    // quiz = false\n    ret = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [/*#__PURE__*/_jsxDEV(AudioTest, {\n          path: path,\n          name: \"title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n          children: /*#__PURE__*/_jsxDEV(\"u\", {\n            children: lienData.titre\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 68\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 65\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), test = (_lienData$texte = lienData.texte) === null || _lienData$texte === void 0 ? void 0 : _lienData$texte.map((phrase, index) => {\n        var _phrase$imageListe;\n\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 33\n            }, this), (_phrase$imageListe = phrase.imageListe) === null || _phrase$imageListe === void 0 ? void 0 : _phrase$imageListe.map((imageName, indexImage) => /*#__PURE__*/_jsxDEV(\"u\", {\n              id: imageName,\n              children: /*#__PURE__*/_jsxDEV(\"u\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  id: \"imageWord\",\n                  src: images[imageName + '.png']\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 28,\n                  columnNumber: 49\n                }, this)\n              }, indexImage, false, {\n                fileName: _jsxFileName,\n                lineNumber: 27,\n                columnNumber: 45\n              }, this)\n            }, imageName, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 41\n            }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(AudioTest, {\n              path: path,\n              name: name = getAudioName(name, index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 33\n            }, this), phrase.phrase]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 29\n          }, this)\n        }, void 0, false);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this);\n  } else {\n    var _lienData$texte2;\n\n    //quiz = true\n    test = (_lienData$texte2 = lienData.texte) === null || _lienData$texte2 === void 0 ? void 0 : _lienData$texte2.map((phrase, index) => /*#__PURE__*/_jsxDEV(Accordion.Body, {\n      children: ImageQuiz(phrase, path, index)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this));\n    test = shuffle(test);\n    let questions = test.map((question, index) => /*#__PURE__*/_jsxDEV(Accordion.Item, {\n      eventKey: index,\n      children: [/*#__PURE__*/_jsxDEV(Accordion.Header, {\n        children: [\"Question \", index + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), question]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this));\n    ret = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"center\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Questionnaire\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n        defaultActiveKey: \"0\",\n        children: questions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this);\n  }\n\n  return ret;\n}\n_c = ImageWord;\nexport function getAudioName(name, index) {\n  name = name.replace(index.toString(), (index + 1).toString());\n  return name;\n}\nexport function getImagePaths(i) {\n  let images = {};\n  i.keys().map(item => {\n    images[item.replace('./', '')] = i(item);\n  });\n  return images;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageWord\");","map":{"version":3,"names":["ImageQuiz","AudioTest","Accordion","ImageWord","path","isQuiz","lienData","require","shuffle","arr","sort","Math","random","images","getImagePaths","context","name","test","ret","titre","texte","map","phrase","index","imageListe","imageName","indexImage","getAudioName","questions","question","replace","toString","i","keys","item"],"sources":["C:/Users/Ced/Desktop/Uni/Inforoute/TP1_Inforoute/tp1_inforoute/src/components/ImageWord.js"],"sourcesContent":["import { ImageQuiz } from './ImageQuiz';\r\nimport AudioTest from './Audio.js';\r\nimport { Accordion } from 'react-bootstrap';\r\n\r\nexport function ImageWord(path, isQuiz) {\r\n\r\n    let lienData = require('./../texte/' + path + '.json');\r\n    const shuffle = arr => [...arr].sort(() => Math.random() - 0.5);\r\n\r\n    let images = getImagePaths(require.context((\"./../images/\"), false, /\\.(png|jpe?g|svg)$/));\r\n    let name = 'sentence_0';\r\n    let test;\r\n    let ret;\r\n\r\n    if(!isQuiz){// quiz = false\r\n        ret = \r\n        <div>\r\n            <h1><AudioTest path={path} name=\"title\"></AudioTest><b><u>{lienData.titre}</u></b></h1>\r\n            {\r\n                test = lienData.texte?.map((phrase, index) => (\r\n                        <>\r\n                            <div key={index}>\r\n                                <br />\r\n                                {\r\n                                    phrase.imageListe?.map((imageName, indexImage) => (\r\n                                        <u key={imageName} id={imageName}>\r\n                                            <u key={indexImage}>\r\n                                                <img id=\"imageWord\" src={images[imageName + '.png']} />\r\n                                            </u>\r\n                                        </u>\r\n\r\n                                    ))\r\n                                }\r\n                                <br />\r\n                                <AudioTest path={path} name={(name = getAudioName(name, index))} />\r\n                                {phrase.phrase}\r\n                            </div>\r\n                    </>\r\n                ))\r\n            }\r\n        </div>\r\n    }else{ //quiz = true\r\n        test = lienData.texte?.map((phrase, index) => (\r\n                <Accordion.Body>\r\n                    {//je sais pas ca sert a quoi mais ca fait un genre de titre underlined pour les images des questions?????\r\n                        // phrase.imageListe?.map((imageName, indexImage) => (\r\n                        //     <u key={imageName} id={imageName}>\r\n                        //         {/* <u key={indexImage}>\r\n                        //             {imageName}\r\n                        //         </u> */}\r\n                        //     </u>\r\n                        // ))\r\n                    }\r\n                    {ImageQuiz(phrase, path, index)}\r\n                </Accordion.Body>\r\n            ))\r\n        test = shuffle(test);\r\n        \r\n        let questions = test.map((question, index) => (\r\n            <Accordion.Item eventKey={index}>\r\n                <Accordion.Header>Question {index+1}</Accordion.Header>  \r\n                {question}\r\n            </Accordion.Item>\r\n        ))\r\n        \r\n        ret =\r\n        <div>\r\n            <center><h1><b>Questionnaire</b></h1></center>\r\n            <Accordion defaultActiveKey=\"0\">\r\n                {questions}\r\n            </Accordion>\r\n        </div>\r\n        \r\n    }\r\n    return (ret);\r\n}\r\n\r\nexport function getAudioName(name, index) {\r\n    name = name.replace(index.toString(), (index + 1).toString())\r\n    return name;\r\n}\r\n\r\nexport function getImagePaths(i) {\r\n    let images = {};\r\n    i.keys().map((item) => { images[item.replace('./', '')] = i(item); });\r\n    return images;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}