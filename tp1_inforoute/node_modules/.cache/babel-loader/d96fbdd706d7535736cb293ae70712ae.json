{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ced\\\\Desktop\\\\Uni\\\\Inforoute\\\\TP1_Inforoute\\\\tp1_inforoute\\\\src\\\\components\\\\ImageWord.js\";\nimport { ImageQuiz } from './ImageQuiz';\nimport AudioTest from './Audio.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ImageWord(path, isQuiz) {\n  var _lienData$texte;\n\n  let lienData = require('./../texte/' + path + '.json');\n\n  const shuffle = arr => [...arr].sort(() => Math.random() - 0.5);\n\n  let images = getImagePaths(require.context(\"./../images/\", false, /\\.(png|jpe?g|svg)$/));\n  let name = 'sentence_0';\n\n  let ret = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: lienData.titre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AudioTest, {\n      path: path,\n      name: \"title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this), (_lienData$texte = lienData.texte) === null || _lienData$texte === void 0 ? void 0 : _lienData$texte.map((phrase, index) => {\n      var _phrase$imageListe;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 21\n        }, this), (_phrase$imageListe = phrase.imageListe) === null || _phrase$imageListe === void 0 ? void 0 : _phrase$imageListe.map((imageName, indexImage) => /*#__PURE__*/_jsxDEV(\"u\", {\n          id: imageName,\n          children: /*#__PURE__*/_jsxDEV(\"u\", {\n            children: imageName == images ? null : /*#__PURE__*/_jsxDEV(\"img\", {\n              id: \"imageWord\",\n              src: images[imageName + '.png']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 41\n            }, this)\n          }, indexImage, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 33\n          }, this)\n        }, imageName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), isQuiz ? ImageQuiz(phrase, path, index) : phrase.phrase, isQuiz ? null : /*#__PURE__*/_jsxDEV(AudioTest, {\n          path: path,\n          name: name = getAudioName(name, index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 45\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 15\n  }, this);\n\n  if (isQuiz) return console.log(ret.reponse);else return ret;\n}\n_c = ImageWord;\nexport function getAudioName(name, index) {\n  name = name.replace(index.toString(), (index + 1).toString());\n  return name;\n}\nexport function getImagePaths(i) {\n  let images = {};\n  i.keys().map(item => {\n    images[item.replace('./', '')] = i(item);\n  });\n  return images;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageWord\");","map":{"version":3,"names":["ImageQuiz","AudioTest","ImageWord","path","isQuiz","lienData","require","shuffle","arr","sort","Math","random","images","getImagePaths","context","name","ret","titre","texte","map","phrase","index","imageListe","imageName","indexImage","getAudioName","console","log","reponse","replace","toString","i","keys","item"],"sources":["C:/Users/Ced/Desktop/Uni/Inforoute/TP1_Inforoute/tp1_inforoute/src/components/ImageWord.js"],"sourcesContent":["import { ImageQuiz } from './ImageQuiz';\r\nimport AudioTest from './Audio.js';\r\n\r\nexport function ImageWord(path, isQuiz) {\r\n\r\n    let lienData = require('./../texte/' + path + '.json');\r\n    const shuffle = arr => [...arr].sort(() => Math.random() - 0.5);\r\n\r\n    let images = getImagePaths(require.context((\"./../images/\"), false, /\\.(png|jpe?g|svg)$/));\r\n    let name = 'sentence_0';\r\n\r\n    let ret = <div>\r\n        <h2>{lienData.titre}</h2>\r\n        <AudioTest path={path} name=\"title\" />\r\n        {\r\n            lienData.texte?.map((phrase, index) => (\r\n                <div key={index}>\r\n                    <br/>\r\n                    {\r\n                        phrase.imageListe?.map((imageName, indexImage) => (\r\n                            <u key={imageName} id={imageName}>\r\n                                \r\n                                <u key={indexImage}>\r\n                                    {imageName == images ? (\r\n                                        null\r\n                                    ) : (\r\n                                        <img id=\"imageWord\" src={images[imageName + '.png']} />\r\n                                    )\r\n                                    }\r\n                                </u>\r\n                                \r\n                            </u>\r\n                            \r\n                        ))   \r\n                    }\r\n                    <br/>\r\n                                {\r\n                                    isQuiz ?\r\n                                        (\r\n                                            ImageQuiz(phrase, path, index)\r\n\r\n                                        ) : (\r\n                                            phrase.phrase\r\n                                        )\r\n                                }\r\n                                {\r\n                                    isQuiz ?\r\n                                        (\r\n                                            null\r\n                                        ) : (\r\n                                            <AudioTest path={path} name={(name = getAudioName(name, index))} />\r\n                                        )\r\n                                }\r\n                </div>\r\n            ))\r\n        }\r\n    </div>\r\n\r\n    if (isQuiz)\r\n        return (\r\n            console.log(ret.reponse)\r\n        );\r\n    else\r\n        return (ret);\r\n\r\n}\r\n\r\nexport function getAudioName(name, index) {\r\n    name = name.replace(index.toString(), (index + 1).toString())\r\n    return name;\r\n}\r\n\r\nexport function getImagePaths(i) {\r\n    let images = {};\r\n    i.keys().map((item) => { images[item.replace('./', '')] = i(item); });\r\n    return images;\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,MAAzB,EAAiC;EAAA;;EAEpC,IAAIC,QAAQ,GAAGC,OAAO,CAAC,gBAAgBH,IAAhB,GAAuB,OAAxB,CAAtB;;EACA,MAAMI,OAAO,GAAGC,GAAG,IAAI,CAAC,GAAGA,GAAJ,EAASC,IAAT,CAAc,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAApC,CAAvB;;EAEA,IAAIC,MAAM,GAAGC,aAAa,CAACP,OAAO,CAACQ,OAAR,CAAiB,cAAjB,EAAkC,KAAlC,EAAyC,oBAAzC,CAAD,CAA1B;EACA,IAAIC,IAAI,GAAG,YAAX;;EAEA,IAAIC,GAAG,gBAAG;IAAA,wBACN;MAAA,UAAKX,QAAQ,CAACY;IAAd;MAAA;MAAA;MAAA;IAAA,QADM,eAEN,QAAC,SAAD;MAAW,IAAI,EAAEd,IAAjB;MAAuB,IAAI,EAAC;IAA5B;MAAA;MAAA;MAAA;IAAA,QAFM,qBAIFE,QAAQ,CAACa,KAJP,oDAIF,gBAAgBC,GAAhB,CAAoB,CAACC,MAAD,EAASC,KAAT;MAAA;;MAAA,oBAChB;QAAA,wBACI;UAAA;UAAA;UAAA;QAAA,QADJ,wBAGQD,MAAM,CAACE,UAHf,uDAGQ,mBAAmBH,GAAnB,CAAuB,CAACI,SAAD,EAAYC,UAAZ,kBACnB;UAAmB,EAAE,EAAED,SAAvB;UAAA,uBAEI;YAAA,UACKA,SAAS,IAAIX,MAAb,GACG,IADH,gBAGG;cAAK,EAAE,EAAC,WAAR;cAAoB,GAAG,EAAEA,MAAM,CAACW,SAAS,GAAG,MAAb;YAA/B;cAAA;cAAA;cAAA;YAAA;UAJR,GAAQC,UAAR;YAAA;YAAA;YAAA;UAAA;QAFJ,GAAQD,SAAR;UAAA;UAAA;UAAA;QAAA,QADJ,CAHR,eAmBI;UAAA;UAAA;UAAA;QAAA,QAnBJ,EAqBoBnB,MAAM,GAEEJ,SAAS,CAACoB,MAAD,EAASjB,IAAT,EAAekB,KAAf,CAFX,GAKED,MAAM,CAACA,MA1BnC,EA8BoBhB,MAAM,GAEE,IAFF,gBAIE,QAAC,SAAD;UAAW,IAAI,EAAED,IAAjB;UAAuB,IAAI,EAAGY,IAAI,GAAGU,YAAY,CAACV,IAAD,EAAOM,KAAP;QAAjD;UAAA;UAAA;UAAA;QAAA,QAlC5B;MAAA,GAAUA,KAAV;QAAA;QAAA;QAAA;MAAA,QADgB;IAAA,CAApB,CAJE;EAAA;IAAA;IAAA;IAAA;EAAA,QAAV;;EA+CA,IAAIjB,MAAJ,EACI,OACIsB,OAAO,CAACC,GAAR,CAAYX,GAAG,CAACY,OAAhB,CADJ,CADJ,KAKI,OAAQZ,GAAR;AAEP;KA9Ded,S;AAgEhB,OAAO,SAASuB,YAAT,CAAsBV,IAAtB,EAA4BM,KAA5B,EAAmC;EACtCN,IAAI,GAAGA,IAAI,CAACc,OAAL,CAAaR,KAAK,CAACS,QAAN,EAAb,EAA+B,CAACT,KAAK,GAAG,CAAT,EAAYS,QAAZ,EAA/B,CAAP;EACA,OAAOf,IAAP;AACH;AAED,OAAO,SAASF,aAAT,CAAuBkB,CAAvB,EAA0B;EAC7B,IAAInB,MAAM,GAAG,EAAb;EACAmB,CAAC,CAACC,IAAF,GAASb,GAAT,CAAcc,IAAD,IAAU;IAAErB,MAAM,CAACqB,IAAI,CAACJ,OAAL,CAAa,IAAb,EAAmB,EAAnB,CAAD,CAAN,GAAiCE,CAAC,CAACE,IAAD,CAAlC;EAA2C,CAApE;EACA,OAAOrB,MAAP;AACH"},"metadata":{},"sourceType":"module"}