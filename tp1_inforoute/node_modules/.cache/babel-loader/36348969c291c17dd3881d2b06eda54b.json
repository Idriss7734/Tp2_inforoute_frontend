{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ced\\\\Desktop\\\\Uni\\\\Inforoute\\\\TP1_Inforoute\\\\tp1_inforoute\\\\src\\\\components\\\\ImageQuiz.js\";\nimport { getImagePaths } from './ImageWord';\nimport { getAudioName } from './ImageWord';\nimport AudioTest from './Audio.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ImageQuiz(data, p, path) {\n  const images = getImagePaths(require.context('./../images/', false, /\\.(png|jpe?g|svg)$/));\n  let name = 'question';\n  let questionPath = \"question_1\";\n  const myArray = path.split(\"Quiz\");\n\n  let choix = /*#__PURE__*/_jsxDEV(\"div\", {\n    id: p,\n    children: [p, /*#__PURE__*/_jsxDEV(AudioTest, {\n      path: path + \"/\" + questionPath,\n      name: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), data.reponse.map((choix, indexRep) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"check\",\n      id: indexRep,\n      children: [choix.imageListe.map((imageName, indexImage) => /*#__PURE__*/_jsxDEV(\"u\", {\n        children: imageName == images ? null : /*#__PURE__*/_jsxDEV(\"img\", {\n          id: \"imageWord\",\n          src: images[imageName + '.png']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 41\n        }, this)\n      }, indexImage, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 33\n      }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        value: indexRep\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 25\n      }, this), choix.phrase, /*#__PURE__*/_jsxDEV(AudioTest, {\n        path: path + \"/\" + questionPath,\n        name: name = getAudioName(name, indexRep)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n\n  return choix;\n}\n_c = ImageQuiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageQuiz\");","map":{"version":3,"names":["getImagePaths","getAudioName","AudioTest","ImageQuiz","data","p","path","images","require","context","name","questionPath","myArray","split","choix","reponse","map","indexRep","imageListe","imageName","indexImage","phrase"],"sources":["C:/Users/Ced/Desktop/Uni/Inforoute/TP1_Inforoute/tp1_inforoute/src/components/ImageQuiz.js"],"sourcesContent":["import { getImagePaths } from './ImageWord';\r\nimport { getAudioName } from './ImageWord';\r\nimport AudioTest from './Audio.js';\r\n\r\nexport function ImageQuiz(data, p, path) {\r\n    const images = getImagePaths(require.context('./../images/', false, /\\.(png|jpe?g|svg)$/));\r\n    let name = 'question';\r\n    let questionPath = \"question_1\";\r\n    const myArray = path.split(\"Quiz\");\r\n    let choix =\r\n        <div id={p}>\r\n            {p}\r\n            <AudioTest path={path + \"/\" +  questionPath} name={name} />\r\n            {\r\n                data.reponse.map((choix, indexRep) => (\r\n                    <div className=\"check\" id={indexRep}>\r\n                        {\r\n                            choix.imageListe.map((imageName, indexImage) => (\r\n                                <u key={indexImage}>\r\n                                    {imageName == images ? (\r\n                                        null\r\n                                    ) : (\r\n                                        <img id=\"imageWord\" src={images[imageName + '.png']} />\r\n                                    )\r\n                                    }\r\n                                </u>\r\n                            ))\r\n                        }\r\n                        <br />\r\n                        <input type=\"checkbox\" value={indexRep} />{choix.phrase}\r\n                        <AudioTest path={path + \"/\" +  questionPath} name={name = getAudioName(name, indexRep)} />\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    return (choix);\r\n}\r\n\r\n"],"mappings":";AAAA,SAASA,aAAT,QAA8B,aAA9B;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,CAAzB,EAA4BC,IAA5B,EAAkC;EACrC,MAAMC,MAAM,GAAGP,aAAa,CAACQ,OAAO,CAACC,OAAR,CAAgB,cAAhB,EAAgC,KAAhC,EAAuC,oBAAvC,CAAD,CAA5B;EACA,IAAIC,IAAI,GAAG,UAAX;EACA,IAAIC,YAAY,GAAG,YAAnB;EACA,MAAMC,OAAO,GAAGN,IAAI,CAACO,KAAL,CAAW,MAAX,CAAhB;;EACA,IAAIC,KAAK,gBACL;IAAK,EAAE,EAAET,CAAT;IAAA,WACKA,CADL,eAEI,QAAC,SAAD;MAAW,IAAI,EAAEC,IAAI,GAAG,GAAP,GAAcK,YAA/B;MAA6C,IAAI,EAAED;IAAnD;MAAA;MAAA;MAAA;IAAA,QAFJ,EAIQN,IAAI,CAACW,OAAL,CAAaC,GAAb,CAAiB,CAACF,KAAD,EAAQG,QAAR,kBACb;MAAK,SAAS,EAAC,OAAf;MAAuB,EAAE,EAAEA,QAA3B;MAAA,WAEQH,KAAK,CAACI,UAAN,CAAiBF,GAAjB,CAAqB,CAACG,SAAD,EAAYC,UAAZ,kBACjB;QAAA,UACKD,SAAS,IAAIZ,MAAb,GACG,IADH,gBAGG;UAAK,EAAE,EAAC,WAAR;UAAoB,GAAG,EAAEA,MAAM,CAACY,SAAS,GAAG,MAAb;QAA/B;UAAA;UAAA;UAAA;QAAA;MAJR,GAAQC,UAAR;QAAA;QAAA;QAAA;MAAA,QADJ,CAFR,eAaI;QAAA;QAAA;QAAA;MAAA,QAbJ,eAcI;QAAO,IAAI,EAAC,UAAZ;QAAuB,KAAK,EAAEH;MAA9B;QAAA;QAAA;QAAA;MAAA,QAdJ,EAc+CH,KAAK,CAACO,MAdrD,eAeI,QAAC,SAAD;QAAW,IAAI,EAAEf,IAAI,GAAG,GAAP,GAAcK,YAA/B;QAA6C,IAAI,EAAED,IAAI,GAAGT,YAAY,CAACS,IAAD,EAAOO,QAAP;MAAtE;QAAA;QAAA;QAAA;MAAA,QAfJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,CAJR;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;;EA0BA,OAAQH,KAAR;AACH;KAhCeX,S"},"metadata":{},"sourceType":"module"}