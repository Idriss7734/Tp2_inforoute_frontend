{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ced\\\\Desktop\\\\Uni\\\\Inforoute\\\\TP1_Inforoute\\\\tp1_inforoute\\\\src\\\\components\\\\ImageWord.js\";\nimport { ImageQuiz } from './ImageQuiz';\nimport AudioTest from './Audio.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ImageWord(path, isQuiz) {\n  var _lienData$texte;\n\n  let lienData = require('./../texte/' + path + '.json');\n\n  const shuffle = arr => [...arr].sort(() => Math.random() - 0.5);\n\n  let images = getImagePaths(require.context(\"./../images/\", false, /\\.(png|jpe?g|svg)$/));\n  let name = 'sentence_0';\n  let ret = (_lienData$texte = lienData.texte) === null || _lienData$texte === void 0 ? void 0 : _lienData$texte.map((phrase, index) => {\n    var _phrase$imageListe;\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: (_phrase$imageListe = phrase.imageListe) === null || _phrase$imageListe === void 0 ? void 0 : _phrase$imageListe.map((imageName, indexImage) => /*#__PURE__*/_jsxDEV(\"div\", {\n        id: imageName,\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"u\", {\n          children: imageName == images ? null : /*#__PURE__*/_jsxDEV(\"img\", {\n            id: \"imageWord\",\n            src: images[imageName + '.png']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 33\n          }, this)\n        }, indexImage, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 25\n        }, this), isQuiz ? ImageQuiz(phrase, phrase.phrase, path, index) : phrase.phrase, isQuiz ? null : /*#__PURE__*/_jsxDEV(AudioTest, {\n          path: path,\n          name: name = getAudioName(name, index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 37\n        }, this)]\n      }, imageName, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 21\n      }, this))\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this);\n  });\n  if (isQuiz) return shuffle(ret);else return ret;\n}\n_c = ImageWord;\nexport function getAudioName(name, index) {\n  name = name.replace(index.toString(), (index + 1).toString());\n  return name;\n}\nexport function getImagePaths(i) {\n  let images = {};\n  i.keys().map(item => {\n    images[item.replace('./', '')] = i(item);\n  });\n  return images;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageWord\");","map":{"version":3,"names":["ImageQuiz","AudioTest","ImageWord","path","isQuiz","lienData","require","shuffle","arr","sort","Math","random","images","getImagePaths","context","name","ret","texte","map","phrase","index","imageListe","imageName","indexImage","getAudioName","replace","toString","i","keys","item"],"sources":["C:/Users/Ced/Desktop/Uni/Inforoute/TP1_Inforoute/tp1_inforoute/src/components/ImageWord.js"],"sourcesContent":["import { ImageQuiz } from './ImageQuiz';\r\nimport AudioTest from './Audio.js';\r\n\r\nexport function ImageWord(path, isQuiz) {\r\n\r\n    let lienData = require('./../texte/' + path + '.json');\r\n    const shuffle = arr => [...arr].sort(() => Math.random() - 0.5);\r\n\r\n    let images = getImagePaths(require.context((\"./../images/\"), false, /\\.(png|jpe?g|svg)$/));\r\n    let name = 'sentence_0';\r\n\r\n    let ret = lienData.texte?.map((phrase, index) => (\r\n        <div key={index}>\r\n            {\r\n                phrase.imageListe?.map((imageName, indexImage) => (\r\n                    <div key={imageName} id={imageName}>\r\n                        <br />\r\n                        <u key={indexImage}>\r\n                            {imageName == images ? (\r\n                                null\r\n                            ) : (\r\n                                <img id=\"imageWord\" src={images[imageName + '.png']} />\r\n                            )\r\n                            }\r\n                        </u>\r\n                        <br/>\r\n                        {\r\n                            isQuiz ?\r\n                                (\r\n                                    ImageQuiz(phrase, phrase.phrase, path, index)\r\n\r\n                                ) : (\r\n                                    phrase.phrase\r\n                                )\r\n                        }\r\n                        {\r\n                            isQuiz ?\r\n                                (\r\n                                    null\r\n                                ) : (\r\n                                    <AudioTest path={path} name={(name = getAudioName(name, index))} />\r\n                                )\r\n                        }\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    ))\r\n    if (isQuiz)\r\n        return (\r\n            shuffle(ret)\r\n        );\r\n    else\r\n        return (ret);\r\n\r\n}\r\n\r\nexport function getAudioName(name, index) {\r\n    name = name.replace(index.toString(), (index + 1).toString())\r\n    return name;\r\n}\r\n\r\nexport function getImagePaths(i) {\r\n    let images = {};\r\n    i.keys().map((item) => { images[item.replace('./', '')] = i(item); });\r\n    return images;\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,MAAzB,EAAiC;EAAA;;EAEpC,IAAIC,QAAQ,GAAGC,OAAO,CAAC,gBAAgBH,IAAhB,GAAuB,OAAxB,CAAtB;;EACA,MAAMI,OAAO,GAAGC,GAAG,IAAI,CAAC,GAAGA,GAAJ,EAASC,IAAT,CAAc,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAApC,CAAvB;;EAEA,IAAIC,MAAM,GAAGC,aAAa,CAACP,OAAO,CAACQ,OAAR,CAAiB,cAAjB,EAAkC,KAAlC,EAAyC,oBAAzC,CAAD,CAA1B;EACA,IAAIC,IAAI,GAAG,YAAX;EAEA,IAAIC,GAAG,sBAAGX,QAAQ,CAACY,KAAZ,oDAAG,gBAAgBC,GAAhB,CAAoB,CAACC,MAAD,EAASC,KAAT;IAAA;;IAAA,oBAC1B;MAAA,gCAEQD,MAAM,CAACE,UAFf,uDAEQ,mBAAmBH,GAAnB,CAAuB,CAACI,SAAD,EAAYC,UAAZ,kBACnB;QAAqB,EAAE,EAAED,SAAzB;QAAA,wBACI;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAA,UACKA,SAAS,IAAIV,MAAb,GACG,IADH,gBAGG;YAAK,EAAE,EAAC,WAAR;YAAoB,GAAG,EAAEA,MAAM,CAACU,SAAS,GAAG,MAAb;UAA/B;YAAA;YAAA;YAAA;UAAA;QAJR,GAAQC,UAAR;UAAA;UAAA;UAAA;QAAA,QAFJ,eAUI;UAAA;UAAA;UAAA;QAAA,QAVJ,EAYQnB,MAAM,GAEEJ,SAAS,CAACmB,MAAD,EAASA,MAAM,CAACA,MAAhB,EAAwBhB,IAAxB,EAA8BiB,KAA9B,CAFX,GAKED,MAAM,CAACA,MAjBvB,EAqBQf,MAAM,GAEE,IAFF,gBAIE,QAAC,SAAD;UAAW,IAAI,EAAED,IAAjB;UAAuB,IAAI,EAAGY,IAAI,GAAGS,YAAY,CAACT,IAAD,EAAOK,KAAP;QAAjD;UAAA;UAAA;UAAA;QAAA,QAzBhB;MAAA,GAAUE,SAAV;QAAA;QAAA;QAAA;MAAA,QADJ;IAFR,GAAUF,KAAV;MAAA;MAAA;MAAA;IAAA,QAD0B;EAAA,CAApB,CAAV;EAqCA,IAAIhB,MAAJ,EACI,OACIG,OAAO,CAACS,GAAD,CADX,CADJ,KAKI,OAAQA,GAAR;AAEP;KApDed,S;AAsDhB,OAAO,SAASsB,YAAT,CAAsBT,IAAtB,EAA4BK,KAA5B,EAAmC;EACtCL,IAAI,GAAGA,IAAI,CAACU,OAAL,CAAaL,KAAK,CAACM,QAAN,EAAb,EAA+B,CAACN,KAAK,GAAG,CAAT,EAAYM,QAAZ,EAA/B,CAAP;EACA,OAAOX,IAAP;AACH;AAED,OAAO,SAASF,aAAT,CAAuBc,CAAvB,EAA0B;EAC7B,IAAIf,MAAM,GAAG,EAAb;EACAe,CAAC,CAACC,IAAF,GAASV,GAAT,CAAcW,IAAD,IAAU;IAAEjB,MAAM,CAACiB,IAAI,CAACJ,OAAL,CAAa,IAAb,EAAmB,EAAnB,CAAD,CAAN,GAAiCE,CAAC,CAACE,IAAD,CAAlC;EAA2C,CAApE;EACA,OAAOjB,MAAP;AACH"},"metadata":{},"sourceType":"module"}