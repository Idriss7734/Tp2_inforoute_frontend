{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ced\\\\Desktop\\\\Uni\\\\Inforoute\\\\TP1_Inforoute\\\\tp1_inforoute\\\\src\\\\components\\\\ImageWord.js\";\nimport { ImageQuiz } from './ImageQuiz';\nimport AudioTest from './Audio.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ImageWord(path, isQuiz) {\n  let lienData = require('./../texte/' + path + '.json');\n\n  const shuffle = arr => [...arr].sort(() => Math.random() - 0.5);\n\n  let images = getImagePaths(require.context(\"./../images/\", false, /\\.(png|jpe?g|svg)$/));\n  let name = 'sentence_0';\n  let ret = lienData.texte.map((phrase, imageListe, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: phrase.imageListe.map((imageListe, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      id: index,\n      children: console.log(imageListe)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }, this))\n  }, i, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this));\n  if (isQuiz) return shuffle(ret);else return ret;\n}\n_c = ImageWord;\nexport function getAudioName(name, index) {\n  name = name.replace(index.toString(), (index + 1).toString());\n  return name;\n}\nexport function getImagePaths(i) {\n  let images = {};\n  i.keys().map(item => {\n    images[item.replace('./', '')] = i(item);\n  });\n  return images;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageWord\");","map":{"version":3,"names":["ImageQuiz","AudioTest","ImageWord","path","isQuiz","lienData","require","shuffle","arr","sort","Math","random","images","getImagePaths","context","name","ret","texte","map","phrase","imageListe","i","index","console","log","getAudioName","replace","toString","keys","item"],"sources":["C:/Users/Ced/Desktop/Uni/Inforoute/TP1_Inforoute/tp1_inforoute/src/components/ImageWord.js"],"sourcesContent":["import { ImageQuiz } from './ImageQuiz';\r\nimport AudioTest from './Audio.js';\r\n\r\nexport function ImageWord(path, isQuiz) {\r\n\r\n    let lienData = require('./../texte/' + path + '.json');\r\n    const shuffle = arr => [...arr].sort(() => Math.random() - 0.5);\r\n\r\n    let images = getImagePaths(require.context((\"./../images/\"), false, /\\.(png|jpe?g|svg)$/));\r\n    let name = 'sentence_0';\r\n   \r\n    let ret = lienData.texte.map((phrase, imageListe, i) => (\r\n        <div key={i} >\r\n            \r\n            {   \r\n            phrase.imageListe.map((imageListe, index) => (\r\n                <div key={index} id={index}>\r\n                    {console.log(imageListe)}\r\n                   {/*  <br />\r\n                    {\r\n                        imageListe.imageListe.map((imageName, indexImage) => (\r\n                            <u key={indexImage}>\r\n                                {imageName == images ? (\r\n                                    null\r\n                                ) : (\r\n                                    <img id=\"imageWord\" src={images[imageName + '.png']} />\r\n                                )\r\n                                }\r\n                            </u>\r\n                        ))\r\n                    }\r\n                    <br />\r\n                    {\r\n                        isQuiz ?\r\n                            (\r\n                                ImageQuiz(phrase, phrase.phrase, path, index)\r\n\r\n                            ) : (\r\n                                phrase.phrase\r\n                            )\r\n                    }\r\n                    {\r\n                        isQuiz ?\r\n                            (\r\n                                null\r\n\r\n                            ) : (\r\n                                <AudioTest path={path} name={(name = getAudioName(name, index))} />\r\n                            )\r\n                    } */}\r\n                </div>\r\n            ))\r\n            }\r\n        </div>\r\n    ))\r\n    if (isQuiz)\r\n        return (\r\n            shuffle(ret));\r\n    else\r\n        return (ret);\r\n\r\n}\r\n\r\nexport function getAudioName(name, index) {\r\n    name = name.replace(index.toString(), (index + 1).toString())\r\n    return name;\r\n}\r\n\r\nexport function getImagePaths(i) {\r\n    let images = {};\r\n    i.keys().map((item) => { images[item.replace('./', '')] = i(item); });\r\n    return images;\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,MAAzB,EAAiC;EAEpC,IAAIC,QAAQ,GAAGC,OAAO,CAAC,gBAAgBH,IAAhB,GAAuB,OAAxB,CAAtB;;EACA,MAAMI,OAAO,GAAGC,GAAG,IAAI,CAAC,GAAGA,GAAJ,EAASC,IAAT,CAAc,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAApC,CAAvB;;EAEA,IAAIC,MAAM,GAAGC,aAAa,CAACP,OAAO,CAACQ,OAAR,CAAiB,cAAjB,EAAkC,KAAlC,EAAyC,oBAAzC,CAAD,CAA1B;EACA,IAAIC,IAAI,GAAG,YAAX;EAEA,IAAIC,GAAG,GAAGX,QAAQ,CAACY,KAAT,CAAeC,GAAf,CAAmB,CAACC,MAAD,EAASC,UAAT,EAAqBC,CAArB,kBACzB;IAAA,UAGIF,MAAM,CAACC,UAAP,CAAkBF,GAAlB,CAAsB,CAACE,UAAD,EAAaE,KAAb,kBAClB;MAAiB,EAAE,EAAEA,KAArB;MAAA,UACKC,OAAO,CAACC,GAAR,CAAYJ,UAAZ;IADL,GAAUE,KAAV;MAAA;MAAA;MAAA;IAAA,QADJ;EAHJ,GAAUD,CAAV;IAAA;IAAA;IAAA;EAAA,QADM,CAAV;EA4CA,IAAIjB,MAAJ,EACI,OACIG,OAAO,CAACS,GAAD,CADX,CADJ,KAII,OAAQA,GAAR;AAEP;KA1Ded,S;AA4DhB,OAAO,SAASuB,YAAT,CAAsBV,IAAtB,EAA4BO,KAA5B,EAAmC;EACtCP,IAAI,GAAGA,IAAI,CAACW,OAAL,CAAaJ,KAAK,CAACK,QAAN,EAAb,EAA+B,CAACL,KAAK,GAAG,CAAT,EAAYK,QAAZ,EAA/B,CAAP;EACA,OAAOZ,IAAP;AACH;AAED,OAAO,SAASF,aAAT,CAAuBQ,CAAvB,EAA0B;EAC7B,IAAIT,MAAM,GAAG,EAAb;EACAS,CAAC,CAACO,IAAF,GAASV,GAAT,CAAcW,IAAD,IAAU;IAAEjB,MAAM,CAACiB,IAAI,CAACH,OAAL,CAAa,IAAb,EAAmB,EAAnB,CAAD,CAAN,GAAiCL,CAAC,CAACQ,IAAD,CAAlC;EAA2C,CAApE;EACA,OAAOjB,MAAP;AACH"},"metadata":{},"sourceType":"module"}