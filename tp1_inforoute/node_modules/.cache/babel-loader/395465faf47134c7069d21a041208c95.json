{"ast":null,"code":"import { v4 } from \"uuid\";\n\nconst TaskReducer = function () {\n  let task = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"counter/incremented\":\n      return { ...state,\n        value: state.value + 1\n      };\n\n    case \"counter/decremented\":\n      return { ...state,\n        value: state.value - 1\n      };\n\n    default:\n      // If the reducer doesn't care about this action type,\n      // return the existing state unchanged\n      return state;\n  }\n};\n\n_c = TaskReducer;\nexport default TaskReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskReducer\");","map":{"version":3,"names":["v4","TaskReducer","task","action","type","state","value"],"sources":["C:/Users/Ced/Desktop/Uni/Inforoute/TP1_Inforoute/tp1_inforoute/src/reducers/TaskReducer.jsx"],"sourcesContent":["import { v4 } from \"uuid\";\r\n\r\nconst TaskReducer = (task = {}, action) => {\r\n  switch (action.type) {\r\n    case \"counter/incremented\":\r\n      return { ...state, value: state.value + 1 };\r\n    case \"counter/decremented\":\r\n      return { ...state, value: state.value - 1 };\r\n    default:\r\n      // If the reducer doesn't care about this action type,\r\n      // return the existing state unchanged\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default TaskReducer;\r\n"],"mappings":"AAAA,SAASA,EAAT,QAAmB,MAAnB;;AAEA,MAAMC,WAAW,GAAG,YAAuB;EAAA,IAAtBC,IAAsB,uEAAf,EAAe;EAAA,IAAXC,MAAW;;EACzC,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,qBAAL;MACE,OAAO,EAAE,GAAGC,KAAL;QAAYC,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;MAAjC,CAAP;;IACF,KAAK,qBAAL;MACE,OAAO,EAAE,GAAGD,KAAL;QAAYC,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;MAAjC,CAAP;;IACF;MACE;MACA;MACA,OAAOD,KAAP;EARJ;AAUD,CAXD;;KAAMJ,W;AAaN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}