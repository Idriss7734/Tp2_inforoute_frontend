{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ced\\\\Desktop\\\\Uni\\\\Inforoute\\\\TP1_Inforoute\\\\tp1_inforoute\\\\src\\\\components\\\\ImageWord.js\";\nimport { ImageQuiz } from './ImageQuiz';\nimport AudioTest from './Audio.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ImageWord(path, isQuiz) {\n  let lienData = require('./../texte/' + path + '.json');\n\n  const shuffle = arr => [...arr].sort(() => Math.random() - 0.5);\n\n  let images = getImagePaths(require.context(\"./../images/\", false, /\\.(png|jpe?g|svg)$/));\n  let name = 'sentence_01';\n  let ret = lienData.map((data, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    id: index,\n    children: [console.log(index), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), data.imageListe.map((imageName, indexImage) => /*#__PURE__*/_jsxDEV(\"u\", {\n      children: imageName == images ? null : /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"imageWord\",\n        src: images[imageName + '.png']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 29\n      }, this)\n    }, indexImage, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), isQuiz ? ImageQuiz(data, data.phrase) : data.phrase, name = name.replace(\"01\", \"W3Schools\"), /*#__PURE__*/_jsxDEV(AudioTest, {\n      path: path,\n      name: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this));\n  if (isQuiz) return shuffle(ret);else return ret;\n}\n_c = ImageWord;\nexport function getImagePaths(i) {\n  let images = {};\n  i.keys().map(item => {\n    images[item.replace('./', '')] = i(item);\n  });\n  return images;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageWord\");","map":{"version":3,"names":["ImageQuiz","AudioTest","ImageWord","path","isQuiz","lienData","require","shuffle","arr","sort","Math","random","images","getImagePaths","context","name","ret","map","data","index","console","log","imageListe","imageName","indexImage","phrase","replace","i","keys","item"],"sources":["C:/Users/Ced/Desktop/Uni/Inforoute/TP1_Inforoute/tp1_inforoute/src/components/ImageWord.js"],"sourcesContent":["import { ImageQuiz } from './ImageQuiz';\r\nimport AudioTest from './Audio.js';\r\n\r\nexport function ImageWord(path, isQuiz) {\r\n\r\n    let lienData = require('./../texte/' + path + '.json');\r\n    const shuffle = arr => [...arr].sort(() => Math.random() - 0.5);\r\n\r\n    let images = getImagePaths(require.context((\"./../images/\"), false, /\\.(png|jpe?g|svg)$/));\r\n    let name = 'sentence_01';\r\n    let ret = lienData.map((data, index) => (\r\n        <div key={index} id={index}>\r\n            {console.log(index)}\r\n            <br />\r\n            {\r\n                data.imageListe.map((imageName, indexImage) => (\r\n                    <u key={indexImage}>\r\n                        {imageName == images ? (\r\n                            null\r\n                        ) : (\r\n                            <img id=\"imageWord\" src={images[imageName + '.png']} />\r\n                        )\r\n                        }\r\n                    </u>\r\n                ))\r\n                \r\n            }\r\n            <br />\r\n            {\r\n                isQuiz ?\r\n                    (\r\n                        ImageQuiz(data, data.phrase)\r\n                    ) : (\r\n                        data.phrase\r\n                    )\r\n                    \r\n            }\r\n            {(name = name.replace(\"01\", \"W3Schools\"))}\r\n            <AudioTest path={path} name={name}/>\r\n            \r\n        </div>\r\n    ))\r\n    \r\n\r\n    if (isQuiz)\r\n        return (\r\n            shuffle(ret));\r\n    else\r\n        return (ret);\r\n\r\n}\r\n\r\n\r\nexport function getImagePaths(i) {\r\n    let images = {};\r\n    i.keys().map((item) => { images[item.replace('./', '')] = i(item); });\r\n    return images;\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,MAAzB,EAAiC;EAEpC,IAAIC,QAAQ,GAAGC,OAAO,CAAC,gBAAgBH,IAAhB,GAAuB,OAAxB,CAAtB;;EACA,MAAMI,OAAO,GAAGC,GAAG,IAAI,CAAC,GAAGA,GAAJ,EAASC,IAAT,CAAc,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAApC,CAAvB;;EAEA,IAAIC,MAAM,GAAGC,aAAa,CAACP,OAAO,CAACQ,OAAR,CAAiB,cAAjB,EAAkC,KAAlC,EAAyC,oBAAzC,CAAD,CAA1B;EACA,IAAIC,IAAI,GAAG,aAAX;EACA,IAAIC,GAAG,GAAGX,QAAQ,CAACY,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,kBACnB;IAAiB,EAAE,EAAEA,KAArB;IAAA,WACKC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CADL,eAEI;MAAA;MAAA;MAAA;IAAA,QAFJ,EAIQD,IAAI,CAACI,UAAL,CAAgBL,GAAhB,CAAoB,CAACM,SAAD,EAAYC,UAAZ,kBAChB;MAAA,UACKD,SAAS,IAAIX,MAAb,GACG,IADH,gBAGG;QAAK,EAAE,EAAC,WAAR;QAAoB,GAAG,EAAEA,MAAM,CAACW,SAAS,GAAG,MAAb;MAA/B;QAAA;QAAA;QAAA;MAAA;IAJR,GAAQC,UAAR;MAAA;MAAA;MAAA;IAAA,QADJ,CAJR,eAgBI;MAAA;MAAA;MAAA;IAAA,QAhBJ,EAkBQpB,MAAM,GAEEJ,SAAS,CAACkB,IAAD,EAAOA,IAAI,CAACO,MAAZ,CAFX,GAIEP,IAAI,CAACO,MAtBrB,EA0BMV,IAAI,GAAGA,IAAI,CAACW,OAAL,CAAa,IAAb,EAAmB,WAAnB,CA1Bb,eA2BI,QAAC,SAAD;MAAW,IAAI,EAAEvB,IAAjB;MAAuB,IAAI,EAAEY;IAA7B;MAAA;MAAA;MAAA;IAAA,QA3BJ;EAAA,GAAUI,KAAV;IAAA;IAAA;IAAA;EAAA,QADM,CAAV;EAkCA,IAAIf,MAAJ,EACI,OACIG,OAAO,CAACS,GAAD,CADX,CADJ,KAII,OAAQA,GAAR;AAEP;KA/Ced,S;AAkDhB,OAAO,SAASW,aAAT,CAAuBc,CAAvB,EAA0B;EAC7B,IAAIf,MAAM,GAAG,EAAb;EACAe,CAAC,CAACC,IAAF,GAASX,GAAT,CAAcY,IAAD,IAAU;IAAEjB,MAAM,CAACiB,IAAI,CAACH,OAAL,CAAa,IAAb,EAAmB,EAAnB,CAAD,CAAN,GAAiCC,CAAC,CAACE,IAAD,CAAlC;EAA2C,CAApE;EACA,OAAOjB,MAAP;AACH"},"metadata":{},"sourceType":"module"}